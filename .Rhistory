myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
total = cbind(total, x)
total$Genre = NULL
train4 = total[1: (dim(train4)[1]),]
test4 = total[(dim(train4)[1]): (dim(total)[1]),]
train4$logBudget = log(train4$Budget)
train4$bintomatoRating = cut(train4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test4$logBudget = log(test4$Budget)
test4$bintomatoRating = cut(test4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
lc_4 <- trainModel(train4, test_4)
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
library(tm)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train4 = subset(train, select = selected)
train4 = na.omit(train4)
test4 = subset(test, select = selected)
test4 = na.omit(test4)
total = rbind(train4, test4)
myCorpus <- Corpus(VectorSource(total$Genre))
myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
total = cbind(total, x)
total$Genre = NULL
train4 = total[1: (dim(train4)[1]),]
test4 = total[(dim(train4)[1]): (dim(total)[1]),]
train4$logBudget = log(train4$Budget)
train4$bintomatoRating = cut(train4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test4$logBudget = log(test4$Budget)
test4$bintomatoRating = cut(test4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
lc_4 <- trainModel(train4, test4)
g <- plot_learning_curves(lc_4)
g
print (min(lc_4[,3]))
print (which.min(lc_4[,3]))
head(lc_4, 10)
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
library(tm)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train4 = subset(train, select = selected)
train4 = na.omit(train4)
test4 = subset(test, select = selected)
test4 = na.omit(test4)
final = rbind(train4, test4)
corpus <- Corpus(VectorSource(final$Genre))
tdm <- DocumentTermMatrix(corpus, control = list(minWordLength = 1))
X = as.matrix(tdm)
final = cbind(final, X)
final$Genre = NULL
train4 = final[1: (dim(train4)[1]),]
test4 = final[(dim(train4)[1]): (dim(final)[1]),]
train4$logBudget = log(train4$Budget)
train4$bintomatoRating = cut(train4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test4$logBudget = log(test4$Budget)
test4$bintomatoRating = cut(test4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
lc_4 <- trainModel(train4, test4)
g <- plot_learning_curves(lc_4)
g
print (min(lc_4[,3]))
print (which.min(lc_4[,3]))
head(lc_4, 10)
# TODO: Build & evaluate model 5 (numeric, non-numeric and additional features)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train5 = subset(train, select = selected)
train5 = na.omit(train5)
test5 = subset(test, select = selected)
test5 = na.omit(test5)
final = rbind(train5, test5)
myCorpus <- Corpus(VectorSource(final$Genre))
myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
final = cbind(final, x)
final$Genre = NULL
# split train and test
train5 = final[1: (dim(train5)[1]),]
test5 = final[(dim(train5)[1]): (dim(final)[1]),]
# add logBudget and bintomato features to train and tes data
train5$logBudget = log(train5$Budget)
train5$bintomatoRating = cut(train5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test5$logBudget = log(test5$Budget)
test5$bintomatoRating = cut(test5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
# add additional features
train5$test <- ifelse(train5$imdbRating > 6 & train5$Budget > 4000000, 1, 0)
test5$test <- ifelse(test5$imdbRating > 6 & test5$Budget > 4000000, 1, 0)
lc_5 <- trainModel(train5, test5)
g <- plot_learning_curves(lc_5)
g
print (min(learning_curve_3[,3]))
print (which.min(learning_curve_3[,3]))
head(learning_curve_3, 20)
# TODO: Build & evaluate model 5 (numeric, non-numeric and additional features)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train5 = subset(train, select = selected)
train5 = na.omit(train5)
test5 = subset(test, select = selected)
test5 = na.omit(test5)
final = rbind(train5, test5)
myCorpus <- Corpus(VectorSource(final$Genre))
myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
final = cbind(final, x)
final$Genre = NULL
train5 = final[1: (dim(train5)[1]),]
test5 = final[(dim(train5)[1]): (dim(final)[1]),]
train5$logBudget = log(train5$Budget)
train5$bintomatoRating = cut(train5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test5$logBudget = log(test5$Budget)
test5$bintomatoRating = cut(test5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
train5$test <- ifelse(train5$imdbRating > 7 & train5$Budget > 5000000, 1, 0)
test5$test <- ifelse(test5$imdbRating > 7 & test5$Budget > 5000000, 1, 0)
lc_5 <- trainModel(train5, test5)
g <- plot_learning_curves(lc_5)
g
print (min(learning_curve_3[,3]))
print (which.min(learning_curve_3[,3]))
head(learning_curve_3, 20)
load('movies_merged')
options(warn=-1)
df = movies_merged
colnames(df)
library(ggplot2)
# TODO: Remove all rows from df that do not correspond to movies
df_mov <-subset(df, df$Type=="movie")
cat("df has ", dim(df_mov)[1], "rows and", dim(df_mov)[2], "columns", end="\n", file="")
# TODO: Remove rows with missing Gross value
df_mov_gross = df_mov[!is.na(df_mov$Gross), ]
cat("df has", dim(df_mov_gross)[1], "rows and", dim(df_mov_gross)[2], "columns", end="\n", file="")
# TODO: Exclude movies released prior to 2000
df_mov_gross_2k = df_mov_gross[df_mov_gross$Year >=2000 ,]
cat("df has", dim(df_mov_gross_2k)[1], "rows and", dim(df_mov_gross_2k)[2], "columns", end="\n", file="")
# TODO: Remove mismatched rows
X= data.frame(do.call('rbind', strsplit(as.character(df_mov_gross_2k$Released),'-',fixed=TRUE)))
df_mov_gross_2k$releasedYear = X$X1
cat("df_mov_gross_2k", dim(df_mov_gross_2k)[1], "rows and", dim(df_mov_gross_2k)[2], "columns", end="\n", file="")
df_movie_mismatch = df_mov_gross_2k[abs(df_mov_gross_2k$Year - df_mov_gross_2k$Date) <= 1,]
df_movie_mismatch$releasedYear = as.numeric(as.character(df_movie_mismatch$releasedYear))
df_movie_mismatch_2 = df_movie_mismatch[abs(df_movie_mismatch$Year - df_movie_mismatch$releasedYear) <= 1,]
cat("df_movie_gross_2000_match3 has", dim(df_movie_mismatch_2)[1], "rows and", dim(df_movie_mismatch_2)[2], "columns", end="\n", file="")
#df_movie_gross_2000_match2 = df_mov_gross_2k[abs(df_mov_gross_2k$Year - df_mov_gross_2k$Date) <= 1,]
#df_movie_gross_2000_match2$releasedYear = as.numeric(as.character(df_movie_gross_2000_match2$releasedYear))
#df_movie_gross_2000_match3 = df_movie_gross_2000_match2[abs(df_movie_gross_2000_match2$Year - #df_movie_gross_2000_match2$releasedYear) <= 1,]
#cat("df_movie_gross_2000_match3 has", dim(df_movie_gross_2000_match3)[1], "rows and", dim(df_movie_gross_2000_match3)[2], "columns", end="\n", file="")
# TODO: Exclude the `Domestic_Gross` column
df_movie_mismatch_2$Domestic_Gross <- NULL
cat("df_movie_gross_2000_match3 has", dim(df_movie_mismatch_2)[1], "rows and", dim(df_movie_mismatch_2)[2], "columns", end="\n", file="")
# TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
num_rows = dim(df_movie_mismatch_2)[1]
for (i in seq(1, num_rows)){
con = unlist(strsplit(df[i, "Runtime"], split=" "))
if (con == "N/A"){
df_movie_mismatch_2[i,"Runtime"] = 0
next()
}
cur = 0
for (j in seq(1, length(con) - 1)){
if (substr(con[j + 1], 1, 1) == "h"){
cur = cur + as.numeric(con[j]) * 60
}
if (substr(con[j + 1],1, 3) == "min"){
cur = cur + as.numeric(con[j])
}
}
df_movie_mismatch_2[i,"Runtime"]= cur
}
df_movie_mismatch_2$Runtime =as.numeric((df_movie_mismatch_2$Runtime))
# TODO(optional): Additional preprocessing
df = df_movie_mismatch_2
# TODO: Print the dimensions of the final preprocessed dataset and column names
cat("After preprocessing, dataset has", dim(df)[1], "rows and", dim(df)[2], "columns", end="\n", file="")
colnames(df)
# TODO: Build & evaluate model 1 (numeric variables only)
df2 <- df[sample(nrow(df)),]
test = df2[1: (dim(df2)[1] * 0.2),]
train = df2[((dim(df2)[1] * 0.2)) : dim(df2)[1],]
feature_set = c("Gross", "Runtime", "imdbVotes", "tomatoRating", "imdbRating","tomatoFresh","Budget" )
this_train = subset(train, select = feature_set)
this_train = na.omit(this_train)
this_test = subset(test, select = feature_set)
this_test = na.omit(this_test)
getLearningCurve <- function(train_rmse, test_rmse){
learning_curve = matrix(c(0), nrow = 10, ncol = 3)
colnames = c("sample_percentage", "train", "")
for (row in 1: 10){
learning_curve[row,1] = row * 0.1
learning_curve[row, 2] = mean(train_rmse[row,])
learning_curve[row, 3] = mean(test_rmse[row,])
}
learning_curve = data.frame(learning_curve)
return(learning_curve)
}
plot_learning_curves <- function(learning_curve){
percent = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
g <- ggplot(learning_curve, aes(percent))
g <- g + geom_line(aes(y=learning_curve[2]), colour="red")
g <- g + geom_line(aes(y=learning_curve[3]), colour="green")
g = g + labs(title = "Train RMSE vs Test RMSE")
return(g)
}
trainModel <- function(train, test){
sample_size = as.integer(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0) * dim(train)[1])
train_rmses = matrix(c(0), nrow = 10, ncol = 10)
test_rmses = matrix(c(0), nrow = 10, ncol = 10)
for (j in 1:10){
train = train[sample(nrow(train)),]
for (i in 1:10){
cur = train[1:sample_size[i],]
fit = lm(Gross~., data = cur, na.action = na.omit)
cur$pred_train = predict(fit, cur)
cur$resid = (cur$pred_train - cur$Gross) * (cur$pred_train - cur$Gross)
cur_RMSE = sqrt(sum(cur$resid) / dim(cur)[1])
train_rmses[i,j] = (cur_RMSE)
test$pred_test = predict(fit, test)
test$resid = (test$pred_test - test$Gross) * (test$pred_test - test$Gross)
test_rmse = sqrt(sum(test$resid) / dim(test)[1])
test_rmses[i, j] = test_rmse
}
}
lc = getLearningCurve(train_rmses, test_rmses)
return(lc)
}
lc_1 = trainModel(this_train, this_test)
g = plot_learning_curves(lc_1)
g
head(lc_1, 10)
print (min(lc_1[,3]))
print (which.min(lc_1[,3]))
# TODO: Build & evaluate model 2 (transformed numeric variables only)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating", "imdbRating","tomatoFresh","Budget" )
train2 = subset(train, select = selected)
train2 = na.omit(train2)
train2$logBudget = log(train2$Budget)
train2$bintomatoRating = cut(train2$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test2 = subset(test, select = selected)
test2 = na.omit(test2)
test2$logBudget = log(test2$Budget)
test2$bintomatoRating = cut(test2$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
lc_2 = trainModel(train2, test2)
g = plot_learning_curves(lc_2)
g
head(lc_2, 10)
print (min(lc_2[,3]))
print (which.min(lc_2[,3]))
# TODO: Build & evaluate model 3 (converted non-numeric variables only)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train3 = subset(train, select = selected)
train3 = na.omit(train3)
test3 = subset(test, select = selected)
test3 = na.omit(test3)
total = rbind(train3, test3)
library(tm)
myCorpus <- Corpus(VectorSource(total$Genre))
myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
total = cbind(total, x)
total$Genre = NULL
train3 = total[1: (dim(train3)[1]),]
test3 = total[(dim(train3)[1]): (dim(total)[1]),]
lc_3 = trainModel(train3, test3)
g = plot_learning_curves(lc_3)
g
print (min(lc_3[,3]))
print (which.min(lc_3[,3]))
head(lc_3, 10)
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
library(tm)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train4 = subset(train, select = selected)
train4 = na.omit(train4)
test4 = subset(test, select = selected)
test4 = na.omit(test4)
final = rbind(train4, test4)
corpus <- Corpus(VectorSource(final$Genre))
tdm <- DocumentTermMatrix(corpus, control = list(minWordLength = 1))
X = as.matrix(tdm)
final = cbind(final, X)
final$Genre = NULL
train4 = final[1: (dim(train4)[1]),]
test4 = final[(dim(train4)[1]): (dim(final)[1]),]
train4$logBudget = log(train4$Budget)
train4$bintomatoRating = cut(train4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test4$logBudget = log(test4$Budget)
test4$bintomatoRating = cut(test4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
lc_4 <- trainModel(train4, test4)
g <- plot_learning_curves(lc_4)
g
print (min(lc_4[,3]))
print (which.min(lc_4[,3]))
head(lc_4, 10)
# TODO: Build & evaluate model 5 (numeric, non-numeric and additional features)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train5 = subset(train, select = selected)
train5 = na.omit(train5)
test5 = subset(test, select = selected)
test5 = na.omit(test5)
final = rbind(train5, test5)
myCorpus <- Corpus(VectorSource(final$Genre))
myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
final = cbind(final, x)
final$Genre = NULL
train5 = final[1: (dim(train5)[1]),]
test5 = final[(dim(train5)[1]): (dim(final)[1]),]
train5$logBudget = log(train5$Budget)
train5$bintomatoRating = cut(train5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test5$logBudget = log(test5$Budget)
test5$bintomatoRating = cut(test5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
train5$test <- ifelse(train5$imdbRating > 7 & train5$Budget > 5000000, 1, 0)
test5$test <- ifelse(test5$imdbRating > 7 & test5$Budget > 5000000, 1, 0)
lc_5 <- trainModel(train5, test5)
g <- plot_learning_curves(lc_5)
g
print (min(learning_curve_3[,3]))
print (which.min(learning_curve_3[,3]))
head(learning_curve_3, 20)
load('movies_merged')
options(warn=-1)
df = movies_merged
colnames(df)
library(ggplot2)
# TODO: Remove all rows from df that do not correspond to movies
df_mov <-subset(df, df$Type=="movie")
cat("df has ", dim(df_mov)[1], "rows and", dim(df_mov)[2], "columns", end="\n", file="")
# TODO: Remove rows with missing Gross value
df_mov_gross = df_mov[!is.na(df_mov$Gross), ]
cat("df has", dim(df_mov_gross)[1], "rows and", dim(df_mov_gross)[2], "columns", end="\n", file="")
# TODO: Exclude movies released prior to 2000
df_mov_gross_2k = df_mov_gross[df_mov_gross$Year >=2000 ,]
cat("df has", dim(df_mov_gross_2k)[1], "rows and", dim(df_mov_gross_2k)[2], "columns", end="\n", file="")
# TODO: Remove mismatched rows
X= data.frame(do.call('rbind', strsplit(as.character(df_mov_gross_2k$Released),'-',fixed=TRUE)))
df_mov_gross_2k$releasedYear = X$X1
cat("df_mov_gross_2k", dim(df_mov_gross_2k)[1], "rows and", dim(df_mov_gross_2k)[2], "columns", end="\n", file="")
df_movie_mismatch = df_mov_gross_2k[abs(df_mov_gross_2k$Year - df_mov_gross_2k$Date) <= 1,]
df_movie_mismatch$releasedYear = as.numeric(as.character(df_movie_mismatch$releasedYear))
df_movie_mismatch_2 = df_movie_mismatch[abs(df_movie_mismatch$Year - df_movie_mismatch$releasedYear) <= 1,]
cat("df_movie_gross_2000_match3 has", dim(df_movie_mismatch_2)[1], "rows and", dim(df_movie_mismatch_2)[2], "columns", end="\n", file="")
#df_movie_gross_2000_match2 = df_mov_gross_2k[abs(df_mov_gross_2k$Year - df_mov_gross_2k$Date) <= 1,]
#df_movie_gross_2000_match2$releasedYear = as.numeric(as.character(df_movie_gross_2000_match2$releasedYear))
#df_movie_gross_2000_match3 = df_movie_gross_2000_match2[abs(df_movie_gross_2000_match2$Year - #df_movie_gross_2000_match2$releasedYear) <= 1,]
#cat("df_movie_gross_2000_match3 has", dim(df_movie_gross_2000_match3)[1], "rows and", dim(df_movie_gross_2000_match3)[2], "columns", end="\n", file="")
# TODO: Exclude the `Domestic_Gross` column
df_movie_mismatch_2$Domestic_Gross <- NULL
cat("df_movie_gross_2000_match3 has", dim(df_movie_mismatch_2)[1], "rows and", dim(df_movie_mismatch_2)[2], "columns", end="\n", file="")
# TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
num_rows = dim(df_movie_mismatch_2)[1]
for (i in seq(1, num_rows)){
con = unlist(strsplit(df[i, "Runtime"], split=" "))
if (con == "N/A"){
df_movie_mismatch_2[i,"Runtime"] = 0
next()
}
cur = 0
for (j in seq(1, length(con) - 1)){
if (substr(con[j + 1], 1, 1) == "h"){
cur = cur + as.numeric(con[j]) * 60
}
if (substr(con[j + 1],1, 3) == "min"){
cur = cur + as.numeric(con[j])
}
}
df_movie_mismatch_2[i,"Runtime"]= cur
}
df_movie_mismatch_2$Runtime =as.numeric((df_movie_mismatch_2$Runtime))
# TODO(optional): Additional preprocessing
df = df_movie_mismatch_2
# TODO: Print the dimensions of the final preprocessed dataset and column names
cat("After preprocessing, dataset has", dim(df)[1], "rows and", dim(df)[2], "columns", end="\n", file="")
colnames(df)
# TODO: Build & evaluate model 1 (numeric variables only)
df2 <- df[sample(nrow(df)),]
test = df2[1: (dim(df2)[1] * 0.2),]
train = df2[((dim(df2)[1] * 0.2)) : dim(df2)[1],]
feature_set = c("Gross", "Runtime", "imdbVotes", "tomatoRating", "imdbRating","tomatoFresh","Budget" )
this_train = subset(train, select = feature_set)
this_train = na.omit(this_train)
this_test = subset(test, select = feature_set)
this_test = na.omit(this_test)
getLearningCurve <- function(train_rmse, test_rmse){
learning_curve = matrix(c(0), nrow = 10, ncol = 3)
colnames = c("sample_percentage", "train", "")
for (row in 1: 10){
learning_curve[row,1] = row * 0.1
learning_curve[row, 2] = mean(train_rmse[row,])
learning_curve[row, 3] = mean(test_rmse[row,])
}
learning_curve = data.frame(learning_curve)
return(learning_curve)
}
plot_learning_curves <- function(learning_curve){
percent = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)
g <- ggplot(learning_curve, aes(percent))
g <- g + geom_line(aes(y=learning_curve[2]), colour="red")
g <- g + geom_line(aes(y=learning_curve[3]), colour="green")
g = g + labs(title = "Train RMSE vs Test RMSE")
return(g)
}
trainModel <- function(train, test){
sample_size = as.integer(c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0) * dim(train)[1])
train_rmses = matrix(c(0), nrow = 10, ncol = 10)
test_rmses = matrix(c(0), nrow = 10, ncol = 10)
for (j in 1:10){
train = train[sample(nrow(train)),]
for (i in 1:10){
cur = train[1:sample_size[i],]
fit = lm(Gross~., data = cur, na.action = na.omit)
cur$pred_train = predict(fit, cur)
cur$resid = (cur$pred_train - cur$Gross) * (cur$pred_train - cur$Gross)
cur_RMSE = sqrt(sum(cur$resid) / dim(cur)[1])
train_rmses[i,j] = (cur_RMSE)
test$pred_test = predict(fit, test)
test$resid = (test$pred_test - test$Gross) * (test$pred_test - test$Gross)
test_rmse = sqrt(sum(test$resid) / dim(test)[1])
test_rmses[i, j] = test_rmse
}
}
lc = getLearningCurve(train_rmses, test_rmses)
return(lc)
}
lc_1 = trainModel(this_train, this_test)
g = plot_learning_curves(lc_1)
g
head(lc_1, 10)
print (min(lc_1[,3]))
print (which.min(lc_1[,3]))
# TODO: Build & evaluate model 2 (transformed numeric variables only)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating", "imdbRating","tomatoFresh","Budget" )
train2 = subset(train, select = selected)
train2 = na.omit(train2)
train2$logBudget = log(train2$Budget)
train2$bintomatoRating = cut(train2$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test2 = subset(test, select = selected)
test2 = na.omit(test2)
test2$logBudget = log(test2$Budget)
test2$bintomatoRating = cut(test2$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
lc_2 = trainModel(train2, test2)
g = plot_learning_curves(lc_2)
g
head(lc_2, 10)
print (min(lc_2[,3]))
print (which.min(lc_2[,3]))
# TODO: Build & evaluate model 3 (converted non-numeric variables only)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train3 = subset(train, select = selected)
train3 = na.omit(train3)
test3 = subset(test, select = selected)
test3 = na.omit(test3)
total = rbind(train3, test3)
library(tm)
myCorpus <- Corpus(VectorSource(total$Genre))
myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
total = cbind(total, x)
total$Genre = NULL
train3 = total[1: (dim(train3)[1]),]
test3 = total[(dim(train3)[1]): (dim(total)[1]),]
lc_3 = trainModel(train3, test3)
g = plot_learning_curves(lc_3)
g
print (min(lc_3[,3]))
print (which.min(lc_3[,3]))
head(lc_3, 10)
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
library(tm)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train4 = subset(train, select = selected)
train4 = na.omit(train4)
test4 = subset(test, select = selected)
test4 = na.omit(test4)
final = rbind(train4, test4)
corpus <- Corpus(VectorSource(final$Genre))
tdm <- DocumentTermMatrix(corpus, control = list(minWordLength = 1))
X = as.matrix(tdm)
final = cbind(final, X)
final$Genre = NULL
train4 = final[1: (dim(train4)[1]),]
test4 = final[(dim(train4)[1]): (dim(final)[1]),]
train4$logBudget = log(train4$Budget)
train4$bintomatoRating = cut(train4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test4$logBudget = log(test4$Budget)
test4$bintomatoRating = cut(test4$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
lc_4 <- trainModel(train4, test4)
g <- plot_learning_curves(lc_4)
g
print (min(lc_4[,3]))
print (which.min(lc_4[,3]))
head(lc_4, 10)
# TODO: Build & evaluate model 5 (numeric, non-numeric and additional features)
selected = c("Gross", "Runtime", "imdbVotes", "tomatoRating","imdbRating","tomatoFresh","Budget", "Genre")
train5 = subset(train, select = selected)
train5 = na.omit(train5)
test5 = subset(test, select = selected)
test5 = na.omit(test5)
final = rbind(train5, test5)
myCorpus <- Corpus(VectorSource(final$Genre))
myTDM <- DocumentTermMatrix(myCorpus, control = list(minWordLength = 1))
x = as.matrix(myTDM)
final = cbind(final, x)
final$Genre = NULL
train5 = final[1: (dim(train5)[1]),]
test5 = final[(dim(train5)[1]): (dim(final)[1]),]
train5$logBudget = log(train5$Budget)
train5$bintomatoRating = cut(train5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
test5$logBudget = log(test5$Budget)
test5$bintomatoRating = cut(test5$tomatoRating, 5, include.lowest=TRUE, labels=c(1, 2,3,4,5))
train5$test <- ifelse(train5$imdbRating > 7 & train5$Budget > 5000000, 1, 0)
test5$test <- ifelse(test5$imdbRating > 7 & test5$Budget > 5000000, 1, 0)
lc_5 <- trainModel(train5, test5)
g <- plot_learning_curves(lc_5)
g
print (min(lc_5[,3]))
print (which.min(lc_5[,3]))
head(lc_5, 20)
